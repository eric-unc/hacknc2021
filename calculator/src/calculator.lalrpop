use std::str::FromStr;
use crate::util::{Expr, Func, Operand};

grammar;

pub Expr: Box<Expr> = {
    Expr OpOrder1 ExprOrder2 => Box::new(Expr::Operation(<>)),
    ExprOrder2,
};

OpOrder1: Operand = {
    "+" => Operand::Add,
    "-" => Operand::Sub,
};

ExprOrder2: Box<Expr> = {
    ExprOrder2 OpOrder2 Group => Box::new(Expr::Operation(<>)),
    Group,
};

OpOrder2: Operand = {
    "*" => Operand::Mul,
    "/" => Operand::Div,
};

Group: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    <Func> "(" <Expr> ")" => Box::new(Expr::Function(<>)),
    "(" <Expr> ")"
};

Func: Func = {
    "sqrt" => Func::Sqrt,
}

Num: f64 = {
    r"\-?[0-9]+(\.([0-9]+)?)?|\-?\.([0-9]+)?" => f64::from_str(<>).unwrap()
};

