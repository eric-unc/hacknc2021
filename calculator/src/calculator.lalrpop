use std::str::FromStr;
use crate::util::{Expr, Func, Operand, Constant};

grammar;

pub Expr: Box<Expr> = {
    Expr OpOrder1 ExprOrder2 => Box::new(Expr::Operation(<>)),
    ExprOrder2,
};

OpOrder1: Operand = {
    "+" => Operand::Add,
    "-" => Operand::Sub,
};

ExprOrder2: Box<Expr> = {
    ExprOrder2 OpOrder2 ExprOrder3 => Box::new(Expr::Operation(<>)),
    ExprOrder3,
};

OpOrder2: Operand = {
    "*" => Operand::Mul,
    "/" => Operand::Div,
};

ExprOrder3: Box<Expr> = {
    ExprOrder3 OpOrder3 Group => Box::new(Expr::Operation(<>)),
    Group,
};

OpOrder3: Operand = {
    "^" => Operand::Power,
}

Group: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Constant => Box::new(Expr::Constant(<>)),
    <Func> "(" <Expr> ")" => Box::new(Expr::Function(<>)),
    "(" <Expr> ")"
};

Func: Func = {
    "sqrt" => Func::Sqrt,
    "sin" => Func::Sin,
    "cos" => Func::Cos,
    "tan" => Func::Tan,
    "abs" => Func::Abs,
    "round" => Func::Round,
    "factorial" => Func::Factorial,
}

Num: f64 = {
    r"\-?[0-9]+(\.([0-9]+)?)?|\-?\.([0-9]+)?" => f64::from_str(<>).unwrap()
};

Constant: Constant = {
    "pi" => Constant::PI,
    "e" => Constant::E,
}
